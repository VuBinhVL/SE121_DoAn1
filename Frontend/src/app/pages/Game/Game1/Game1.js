import React, { useState, useEffect } from "react";
import "./Game1.css";

const questions = [
  {
    question: "Khi b·∫°n ƒë∆∞·ª£c t·∫∑ng qu√†, b·∫°n s·∫Ω c·∫£m th·∫•y nh∆∞ th·∫ø n√†o?",
    image: "https://via.placeholder.com/300", // Thay link h√¨nh ·∫£nh th·∫≠t
    correctAnswer: "üòä",
    advice: "H√£y tr√¢n tr·ªçng m√≥n qu√† t·ª´ ng∆∞·ªùi kh√°c v√† b√†y t·ªè l√≤ng bi·∫øt ∆°n nh√©!",
  },
  {
    question: "Khi b·∫°n l√†m m·∫•t ƒë·ªì ch∆°i y√™u th√≠ch, b·∫°n s·∫Ω c·∫£m th·∫•y ra sao?",
    image: "https://via.placeholder.com/300", // Thay link h√¨nh ·∫£nh th·∫≠t
    correctAnswer: "üò¢",
    advice:
      "C·∫£m x√∫c bu·ªìn l√† b√¨nh th∆∞·ªùng, h√£y chia s·∫ª v·ªõi cha m·∫π ƒë·ªÉ t√¨m l·∫°i ƒë·ªì ch∆°i!",
  },
];

const emotions = [
  { emoji: "üò¢", description: "Bu·ªìn" },
  { emoji: "üò°", description: "T·ª©c gi·∫≠n" },
  { emoji: "üòä", description: "Vui v·∫ª" },
  { emoji: "üò±", description: "S·ª£ h√£i" },
];

export default function Game1() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [feedback, setFeedback] = useState(null);
  const [timer, setTimer] = useState(30);

  // X·ª≠ l√Ω logic gi·∫£m th·ªùi gian
  useEffect(() => {
    const countdown = setInterval(() => {
      setTimer((prev) => (prev > 0 ? prev - 1 : 0));
    }, 1000);

    // Khi h·∫øt gi·ªù, t·ª± ƒë·ªông chuy·ªÉn c√¢u h·ªèi
    if (timer === 0) {
      handleTimeout();
    }

    return () => clearInterval(countdown);
  }, [timer]);

  // X·ª≠ l√Ω khi tr·∫£ l·ªùi c√¢u h·ªèi
  const handleAnswer = (choice) => {
    const correct = questions[currentQuestion].correctAnswer;

    if (choice === correct) {
      setScore(score + 10);
      setFeedback("B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng! +10 ƒëi·ªÉm");
    } else {
      setFeedback(
        `Sai r·ªìi! ƒê√°p √°n ƒë√∫ng l√† ${correct}. ${questions[currentQuestion].advice}`
      );
    }

    setTimeout(() => nextQuestion(), 2000);
  };

  // X·ª≠ l√Ω khi h·∫øt th·ªùi gian
  const handleTimeout = () => {
    setFeedback(
      `H·∫øt gi·ªù! ƒê√°p √°n ƒë√∫ng l√† ${questions[currentQuestion].correctAnswer}.`
    );
    setTimeout(() => nextQuestion(), 2000);
  };

  // Chuy·ªÉn sang c√¢u h·ªèi ti·∫øp theo
  const nextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setTimer(30);
      setFeedback(null);
    } else {
      alert(`Tr√≤ ch∆°i k·∫øt th√∫c! T·ªïng ƒëi·ªÉm c·ªßa b·∫°n: ${score}`);
      setCurrentQuestion(0);
      setScore(0);
      setTimer(30);
      setFeedback(null);
    }
  };

  return (
    <div className="game-container">
      {/* ƒêi·ªÉm c·ªßa ng∆∞·ªùi ch∆°i */}
      <div className="score">ƒêi·ªÉm: {score}</div>

      {/* B·ªô ƒë·∫øm th·ªùi gian */}
      <div className="timer">Th·ªùi gian: {timer}s</div>

      {/* C√¢u h·ªèi */}
      <div className="question">
        <h2>{questions[currentQuestion].question}</h2>
        <img
          src={questions[currentQuestion].image}
          alt="C√¢u h·ªèi h√¨nh ·∫£nh"
          className="question-image"
        />
      </div>

      {/* Th·∫ª c·∫£m x√∫c */}
      <div className="playcards">
        {emotions.map((emotion, index) => (
          <button
            key={index}
            className="playcard"
            onClick={() => handleAnswer(emotion.emoji)}
          >
            <span className="emoji">{emotion.emoji}</span>
            <span className="description">{emotion.description}</span>
          </button>
        ))}
      </div>

      {/* Ph·∫£n h·ªìi */}
      {feedback && <div className="feedback">{feedback}</div>}
    </div>
  );
}
